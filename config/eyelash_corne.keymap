#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <17 15 16 14 18>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <23 24 25 26 22>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        Layer3 {
            bindings = <&to 3>;
            key-positions = <28 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&mt LS(LA(LC(LEFT_COMMAND))) ESC  &kp Q                &kp W            &kp E                &kp R              &kp T                                                   &kp UP                &kp Y                            &kp U               &kp I                 &kp O             &kp P                    &kp EQUAL
&kp GRAVE                         &hml LEFT_CONTROL A  &hml LEFT_ALT S  &hml LEFT_COMMAND D  &hml LEFT_SHIFT F  &hml LS(LA(LC(LEFT_COMMAND))) G               &kp LEFT  &kp ENTER  &kp RIGHT  &hmr LS(LA(LC(LEFT_COMMAND))) H  &hmr RIGHT_SHIFT J  &hmr RIGHT_COMMAND K  &hmr RIGHT_ALT L  &hmr RIGHT_CONTROL SEMI  &kp MINUS
&kp TAB                           &kp Z                &kp X            &kp C                &kp V              &kp B                            &kp SPACE              &kp DOWN              &kp N                            &kp M               &kp COMMA             &kp DOT           &kp FSLH                 &kp SQT
                                                                        &kp LSHIFT           &lt 2 SPACE        &mt LEFT_COMMAND LANG2                                                        &mt LEFT_COMMAND LANG1           &lt 1 RETURN        &kp BACKSPACE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&trans          &kp N1                         &kp N2              &kp N3                   &kp N4                 &kp N5                                                           &mmv MOVE_UP                     &kp N6     &kp N7         &kp N8     &kp N9     &kp N0    &kp PLUS
&kp LEFT_BRACE  &hml LEFT_CONTROL RIGHT_BRACE  &hml LEFT_ALT HOME  &hml LEFT_COMMAND PG_UP  &hml LEFT_SHIFT PG_DN  &hml LS(LA(LC(LEFT_COMMAND))) END                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT   &kp DOWN       &kp UP     &kp RIGHT  &kp LBKT  &kp RBKT
&trans          &kp EXCL                       &kp AT              &kp HASH                 &kp DOLLAR             &kp PERCENT                        &kp C_MUTE                    &mmv MOVE_DOWN                   &kp CARET  &kp AMPERSAND  &kp ASTRK  &kp LPAR   &kp RPAR  &kp BACKSLASH
                                                                   &trans                   &trans                 &trans                                                                                            &trans     &trans         &kp DEL
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "KEYPAD";
            bindings = <
&none  &none   &none   &none   &none   &none                              &mmv MOVE_UP                     &kp LA(LPAR)  &kp KP_N7   &kp KP_N8  &kp KP_N9  &kp KP_N0        &kp KP_EQUAL
&none  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10            &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp COLON     &kp KP_N4   &kp KP_N5  &kp KP_N6  &kp KP_MULTIPLY  &kp KP_MINUS
&none  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5   &trans                    &mmv MOVE_DOWN                   &kp KP_N0     &kp KP_N1   &kp KP_N2  &kp KP_N3  &kp KP_DIVIDE    &kp KP_PLUS
                       &trans  &trans  &trans                                                              &kp COMMA     &kp KP_DOT  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&bt BT_CLR  &bt BT_CLR_ALL  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&none       &none           &none  &none         &none         &none                   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&none       &none           &none  &none         &none         &none         &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                   &trans        &trans        &trans                                          &trans  &trans  &trans
            >;
        };
    };
};
